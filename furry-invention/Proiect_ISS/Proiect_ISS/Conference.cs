//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Proiect_ISS
{
    using System;
    using System.Collections.Generic;
    using System.Data.SqlClient;
    using System.Windows.Forms;

    public partial class Conference
    {
        public int ID { get; set; }
        public string name { get; set; }

        private string connectionString;

        public Conference(int id, String n)
        {
            ID = id;
            name = n;
            connectionString = @"Data Source=REMUS; Initial Catalog=Conference" + ID + "; Integrated Security=true";
        }

        public void createConference()
        {
            String cString = @"Data Source=REMUS; Integrated Security=true";
            using (SqlConnection con = new SqlConnection(cString))
            {
                try
                {
                    con.Open();
                    using (SqlCommand command = new SqlCommand("CREATE DATABASE Conference" + ID, con))
                        command.ExecuteNonQuery();
                    con.Close();
                }
                catch (Exception e)
                {
                    MessageBox.Show(e.Message);
                }
            }
        }

        public void createTables()
        {
            using (SqlConnection con = new SqlConnection(connectionString))
            {
                try
                {
                    con.Open();
                    using (SqlCommand command = new SqlCommand("" +
                        "CREATE TABLE Proposal( ID INT PRIMARY KEY IDENTITY(1,1), abstract VARCHAR(8000), paper VARCHAR(8000))" +
                        "CREATE TABLE Keyword(ID INT PRIMARY KEY IDENTITY(1, 1), name VARCHAR(30))" +
                        "CREATE TABLE ProposalKeyword(PID INT FOREIGN KEY REFERENCES Proposal(ID), KID INT FOREIGN KEY REFERENCES Keyword(ID), PRIMARY KEY(PID, KID))" +
                        "CREATE TABLE Topic(ID INT PRIMARY KEY IDENTITY(1, 1), name VARCHAR(30))" +
                        "CREATE TABLE ProposalTopic(PID INT FOREIGN KEY REFERENCES Proposal(ID), TID INT FOREIGN KEY REFERENCES Topic(ID), PRIMARY KEY(PID, TID))" +
                        "CREATE TABLE Account(ID INT PRIMARY KEY IDENTITY(1, 1), username VARCHAR(30), password VARCHAR(30), name VARCHAR(50), affiliation VARCHAR(30), email VARCHAR(50), rank INT, section INT)" +
                        "CREATE TABLE Review(AID INT FOREIGN KEY REFERENCES Account(ID), PID INT FOREIGN KEY REFERENCES Proposal(ID), score INT, description VARCHAR(8000), PRIMARY KEY(AID, PID))" +
                        "CREATE TABLE ProposalAccount(PID INT FOREIGN KEY REFERENCES Proposal(ID), AID INT FOREIGN KEY REFERENCES Account(ID), PRIMARY KEY(AID, PID))" +
                        "CREATE TABLE Section(ID INT PRIMARY KEY IDENTITY(1, 1), name VARCHAR(50), chair INT)" +
                        "CREATE TABLE AccountSection(SID INT FOREIGN KEY REFERENCES Section(ID), AID INT FOREIGN KEY REFERENCES Account(ID), speaker BIT, PRIMARY KEY(SID, AID))" +
                        "CREATE TABLE Deadline(ID INT PRIMARY KEY IDENTITY(1, 1), name VARCHAR(50), date DATE)" +
                        "CREATE TABLE Conference(name VARCHAR(50))", con))

                        command.ExecuteNonQuery();
                    con.Close();
                }
                catch (Exception e)
                {
                    MessageBox.Show(e.Message);
                }
            }
        }
    }
}
